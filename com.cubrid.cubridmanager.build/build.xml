<project default="dist" name="CUBRIDAdmin">
	<property name="buildLabel" value="I.CUBRIDAdmin" />
	<property name="archivePrefix" value="cubridadmin" />
	<property name="buildId" value="CUBRIDAdmin" />
	<property name="launcher.name" value="cubridadmin" />
	<property name="sign.alias" value="CUBRID" />
	<property name="sign.keystore" value="${basedir}/keystore/cubridkeystore" />
	<property name="sign.storepass" value="cubrid123" />
	<property name="sign.keypass" value="cubrid!@#" />
	<property name="baseLocation" value="${eclipse.home}" />
	<property name="pluginPath" value="${baseLocation}/dropins/delta/eclipse" />
	<property name="builder" value="${basedir}/product_build_conf" />
	<property name="buildDirectory" value="${basedir}/product_build"/>
	<property name="repositoryDirectory" value="${buildDirectory}/repository"/>
	<property name="buildTempFolder" value="${buildDirectory}" />
	<property name="jdbc.file" value="./driver" />
	<property name="debug" value="" />
	<property file="${basedir}/../com.cubrid.cubridmanager.ui/version.properties" />
	<property name="product.name" value="CUBRIDAdmin" />
	<property name="build.dir" value="${basedir}" />
	<property name="deploy.home" value="${build.dir}/deploy" />
	<property name="output.path" value="${build.dir}/out" />
	<property name="product.linux.32" value="${deploy.home}/linux32/${archivePrefix}" />
	<property name="product.linux.64" value="${deploy.home}/linux64/${archivePrefix}" />
	<property name="product.win.32" value="${deploy.home}/win32/${archivePrefix}" />
	<property name="product.win.64" value="${deploy.home}/win64/${archivePrefix}" />
	<!--
	<property name="product.macosx.carbon" value="${deploy.home}/carbon/${archivePrefix}" />
	-->
	<property name="product.macosx.cocoa" value="${deploy.home}/cocoa/${archivePrefix}" />
	<property name="jre.linux.32" value="${eclipse.home}/jre/linux32.zip" />
	<property name="jre.linux.64" value="${eclipse.home}/jre/linux64.zip" />
	<property name="jre.win.32" value="${eclipse.home}/jre/win32.zip" />
	<property name="jre.win.64" value="${eclipse.home}/jre/win64.zip" />
	<property name="installer.win" value="${build.dir}/installer/win" />
	<!--
	<property name="installer.linux" value="${build.dir}/installer/linux" />
	-->
	<property name="installer.mac" value="${build.dir}/installer/mac" />
	<property name="update.configurator.match" value="org.eclipse.update.configurator,3.3.100.v20100512,plugins/org.eclipse.update.configurator_3.3.100.v20100512.jar,4,false" />
	<property name="update.configurator.replace" value="org.eclipse.update.configurator,3.3.100.v20100512,plugins/org.eclipse.update.configurator_3.3.100.v20100512.jar,4,true" />

	<!--
	Clean
	-->
	<target name="clean">
		<!-- Clean build directory and workspace -->
		<delete includeemptydirs="true" failonerror="false">
			<fileset dir="${buildDirectory}"/>
			<fileset dir="${deploy.home}"/>
		</delete>
	</target>

	<!--
	Prepare the environment
	-->
	<target name="prepare">
		<mkdir dir="${deploy.home}" />
		<mkdir dir="${output.path}" />

		<!-- Copy plug-ins from workspace -->
		<copy todir="${buildDirectory}/plugins">
			<fileset dir="${build.dir}/..">
				<include name="com.cubrid.common.core/**/*"/>
				<include name="com.cubrid.common.ui/**/*"/>
				<include name="com.cubrid.common.update/**/*"/>
				<include name="com.cubrid.common.configuration/**/*"/>
				<include name="com.cubrid.cubridmanager.core/**/*"/>
				<include name="com.cubrid.cubridmanager.app/**/*"/>
				<include name="com.cubrid.cubridmanager.ui/**/*"/>
				<include name="com.cubrid.tool.editor/**/*"/>
				<include name="com.cubrid.cubridquery.ui/**/*"/>
				<include name="org.cubrid.cubridmanager.plugin.manager/**/*"/>
				<include name="org.cubrid.cubridquery.plugin.querybrowser/**/*"/>
				<exclude name="**/bin/**"/>
			</fileset>
		</copy>

		<!-- Copy features from workspace -->
		<copy todir="${buildDirectory}/features">
			<fileset dir="${build.dir}/..">
				<include name="com.cubrid.common.update.feature/**/*"/>
				<include name="com.cubrid.cubridmanager.app.feature/**/*"/>
				<include name="com.cubrid.cubridmanager.dependence.feature/**/*"/>
				<exclude name="**/bin/**"/>
			</fileset>
		</copy>
	</target>

	<!--
	build
	-->
	<target name="build" depends="prepare">
		<ant antfile="${eclipse.pdebuild.scripts}/productBuild/productBuild.xml" />
	</target>

	<!--
	post build
	-->
	<target name="postbuild" depends="build">
		<!--
		optimize win32
		-->
		<unzip dest="${deploy.home}/win32" overwrite="true">
			<fileset dir="${buildDirectory}/${buildLabel}">
				<include name="${buildId}-win32.win32.x86.zip" />
			</fileset>
		</unzip>
		<replaceregexp file="${product.win.32}/configuration/org.eclipse.equinox.simpleconfigurator/bundles.info"
		               match="${update.configurator.match}"
		               replace="${update.configurator.replace}"
		               byline="true"
		/>
		<delete dir="${product.win.32}/readme" />
		<delete>
			<fileset dir="${product.win.32}" includes="*.html" />
			<fileset dir="${product.win.32}" includes="*.xml" />
			<fileset dir="${product.win.32}" includes="*.eclipseproduct" />
		</delete>
		<copy todir="${product.win.32}/driver">
			<fileset dir="${jdbc.file}">
				<include name="*.jar" />
			</fileset>
		</copy>
		<copy todir="${product.win.32}/dropins">
			<fileset dir="${builder}">
				<include name="*.txt" />
			</fileset>
		</copy>
		<unzip src="${jre.win.32}" dest="${product.win.32}" />
		<signjar alias="${sign.alias}" keystore="${sign.keystore}"
		    storepass="${sign.storepass}" keypass="${sign.keypass}">
		  <path>
		    <fileset dir="${product.win.32}/plugins" includes="com.cubrid.*.jar" />
		  	<fileset dir="${product.win.32}/features" includes="com.cubrid.*.jar" />
		  </path>
		</signjar>

		<!--
		optimize win64
		-->
		<unzip dest="${deploy.home}/win64" overwrite="true">
			<fileset dir="${buildDirectory}/${buildLabel}">
				<include name="${buildId}-win32.win32.x86_64.zip" />
			</fileset>
		</unzip>
		<replaceregexp file="${product.win.64}/configuration/org.eclipse.equinox.simpleconfigurator/bundles.info"
		               match="${update.configurator.match}"
		               replace="${update.configurator.replace}"
		               byline="true"
		/>
		<delete dir="${product.win.64}/readme" />
		<delete>
			<fileset dir="${product.win.64}" includes="*.html" />
			<fileset dir="${product.win.64}" includes="*.xml" />
			<fileset dir="${product.win.64}" includes="*.eclipseproduct" />
		</delete>
		<copy todir="${product.win.64}/driver">
			<fileset dir="${jdbc.file}">
				<include name="*.jar" />
			</fileset>
		</copy>
		<copy todir="${product.win.64}/dropins">
			<fileset dir="${builder}">
				<include name="*.txt" />
			</fileset>
		</copy>
		<unzip src="${jre.win.64}" dest="${product.win.64}" />
		<signjar alias="${sign.alias}" keystore="${sign.keystore}"
		    storepass="${sign.storepass}" keypass="${sign.keypass}">
		  <path>
		    <fileset dir="${product.win.64}/plugins" includes="com.cubrid.*.jar" />
		  	<fileset dir="${product.win.64}/features" includes="com.cubrid.*.jar" />
		  </path>
		</signjar>

		<!--
		optimize linux32
		-->
		<unzip dest="${deploy.home}/linux32" overwrite="true">
			<fileset dir="${buildDirectory}/${buildLabel}">
				<include name="${buildId}-linux.gtk.x86.zip" />
			</fileset>
		</unzip>
		<replaceregexp file="${product.linux.32}/configuration/org.eclipse.equinox.simpleconfigurator/bundles.info"
		               match="${update.configurator.match}"
		               replace="${update.configurator.replace}"
		               byline="true"
		/>
		<delete dir="${product.linux.32}/readme" />
		<delete dir="${product.linux.32}/about_files" />
		<delete>
			<fileset dir="${product.linux.32}" includes="*.html" />
			<fileset dir="${product.linux.32}" includes="*.xml" />
			<fileset dir="${product.linux.32}" includes="*.eclipseproduct" />
		</delete>
		<copy todir="${product.linux.32}/driver">
			<fileset dir="${jdbc.file}">
				<include name="*.jar" />
			</fileset>
		</copy>
		<copy todir="${product.linux.32}/dropins">
			<fileset dir="${builder}">
				<include name="*.txt" />
			</fileset>
		</copy>
		<unzip src="${jre.linux.32}" dest="${product.linux.32}" />
		<chmod file="${product.linux.32}/jre/bin/**" perm="755" type="both" />
		<signjar alias="${sign.alias}" keystore="${sign.keystore}"
		    storepass="${sign.storepass}" keypass="${sign.keypass}">
		  <path>
		    <fileset dir="${product.linux.32}/plugins" includes="com.cubrid.*.jar" />
		  	<fileset dir="${product.linux.32}/features" includes="com.cubrid.*.jar" />
		  </path>
		</signjar>

		<!--
		optimize linux64
		-->
		<unzip dest="${deploy.home}/linux64" overwrite="true">
			<fileset dir="${buildDirectory}/${buildLabel}">
				<include name="${buildId}-linux.gtk.x86_64.zip" />
			</fileset>
		</unzip>
		<replaceregexp file="${product.linux.64}/configuration/org.eclipse.equinox.simpleconfigurator/bundles.info"
		               match="${update.configurator.match}"
		               replace="${update.configurator.replace}"
		               byline="true"
		/>
		<delete dir="${product.linux.64}/readme" />
		<delete dir="${product.linux.64}/about_files" />
		<delete>
			<fileset dir="${product.linux.64}" includes="*.html" />
			<fileset dir="${product.linux.64}" includes="*.xml" />
			<fileset dir="${product.linux.64}" includes="*.eclipseproduct" />
		</delete>
		<copy todir="${product.linux.64}/driver">
			<fileset dir="${jdbc.file}">
				<include name="*.jar" />
			</fileset>
		</copy>
		<copy todir="${product.linux.64}/dropins">
			<fileset dir="${builder}">
				<include name="*.txt" />
			</fileset>
		</copy>
		<unzip src="${jre.linux.64}" dest="${product.linux.64}" />
		<signjar alias="${sign.alias}" keystore="${sign.keystore}"
		    storepass="${sign.storepass}" keypass="${sign.keypass}">
		  <path>
		    <fileset dir="${product.linux.64}/plugins" includes="com.cubrid.*.jar" />
		  	<fileset dir="${product.linux.64}/features" includes="com.cubrid.*.jar" />
		  </path>
		</signjar>

		<!--
		optimize carbon
		-->
		<!--
		<unzip dest="${deploy.home}/carbon" overwrite="true">
			<fileset dir="${buildDirectory}/${buildLabel}">
				<include name="${buildId}-macosx.carbon.x86.zip" />
			</fileset>
		</unzip>
		<replaceregexp file="${product.macosx.carbon}/configuration/org.eclipse.equinox.simpleconfigurator/bundles.info"
		               match="${update.configurator.match}"
		               replace="${update.configurator.replace}"
		               byline="true"
		/>
		<delete dir="${product.macosx.carbon}/readme" />
		<delete>
			<fileset dir="${product.macosx.carbon}" includes="*.html" />
			<fileset dir="${product.macosx.carbon}" includes="*.xml" />
			<fileset dir="${product.macosx.carbon}" includes="*.eclipseproduct" />
		</delete>
		<copy todir="${product.macosx.carbon}/driver">
			<fileset dir="${jdbc.file}">
				<include name="*.jar" />
			</fileset>
		</copy>
		<copy todir="${product.macosx.carbon}/dropins">
			<fileset dir="${builder}">
				<include name="*.txt" />
			</fileset>
		</copy>
		<signjar alias="${sign.alias}" keystore="${sign.keystore}"
		    storepass="${sign.storepass}" keypass="${sign.keypass}">
		  <path>
		    <fileset dir="${product.macosx.carbon}/plugins" includes="com.cubrid.*.jar" />
		  	<fileset dir="${product.macosx.carbon}/features" includes="com.cubrid.*.jar" />
		  </path>
		</signjar>
		-->

		<!--
		optimize mac
		-->
		<unzip dest="${deploy.home}/cocoa" overwrite="true">
			<fileset dir="${buildDirectory}/${buildLabel}">
				<include name="${buildId}-macosx.cocoa.x86_64.zip" />
			</fileset>
		</unzip>
		<replaceregexp file="${product.macosx.cocoa}/configuration/org.eclipse.equinox.simpleconfigurator/bundles.info"
		               match="${update.configurator.match}"
		               replace="${update.configurator.replace}"
		               byline="true"
		/>
		<delete dir="${product.macosx.cocoa}/readme" />
		<delete>
			<fileset dir="${product.macosx.cocoa}" includes="*.html" />
			<fileset dir="${product.macosx.cocoa}" includes="*.xml" />
			<fileset dir="${product.macosx.cocoa}" includes="*.eclipseproduct" />
		</delete>
		<copy todir="${product.macosx.cocoa}/driver">
			<fileset dir="${jdbc.file}">
				<include name="*.jar" />
			</fileset>
		</copy>
		<copy todir="${product.macosx.cocoa}/dropins">
			<fileset dir="${builder}">
				<include name="*.txt" />
			</fileset>
		</copy>
		<signjar alias="${sign.alias}" keystore="${sign.keystore}"
		    storepass="${sign.storepass}" keypass="${sign.keypass}">
		  <path>
		    <fileset dir="${product.macosx.cocoa}/plugins" includes="com.cubrid.*.jar" />
		  	<fileset dir="${product.macosx.cocoa}/features" includes="com.cubrid.*.jar" />
		  </path>
		</signjar>

		<!--
		optimize plugin
		-->
		<signjar alias="${sign.alias}" keystore="${sign.keystore}"
		    storepass="${sign.storepass}" keypass="${sign.keypass}">
		  <path>
		    <fileset dir="${repositoryDirectory}/plugins" includes="com.cubrid.*.jar" />
		  	<fileset dir="${repositoryDirectory}/features" includes="com.cubrid.*.jar" />
		  </path>
		</signjar>
	</target>

	<!--
	package win32
	-->
	<target name="packagewin32" depends="postbuild">
		<zip destfile="${output.path}/${product.name}-${product.version}-windows-i386${debug}.zip">
			<zipfileset prefix="cubridadmin" dir="${product.win.32}" />
		</zip>
	</target>

	<!--
	package win64
	-->
	<target name="packagewin64" depends="postbuild">
		<zip destfile="${output.path}/${product.name}-${product.version}-windows-x64${debug}.zip">
			<zipfileset prefix="cubridadmin" dir="${product.win.64}" />
		</zip>
	</target>

	<!--
	package linux32
	-->
	<target name="packagelinux32" depends="postbuild">
		<tar destfile="${deploy.home}/${product.name}-${product.version}-linux-i386.tar">
			<tarfileset dir="${product.linux.32}" prefix="cubridadmin" />
			<tarfileset file="${product.linux.32}/${launcher.name}" filemode="755" prefix="cubridadmin" />
			<tarfileset dir="${product.linux.32}/jre" prefix="cubridadmin/jre" >
				<exclude name="**/bin/**" />
			</tarfileset>
			<tarfileset dir="${product.linux.32}/jre/bin" prefix="cubridadmin/jre/bin" filemode="755" />
		</tar>
		<gzip src="${deploy.home}/${product.name}-${product.version}-linux-i386.tar" destfile="${output.path}/${product.name}-${product.version}-linux-i386${debug}.tar.gz" />
	</target>

	<!--
	package linux64
	-->
	<target name="packagelinux64" depends="postbuild">
		<tar destfile="${deploy.home}/${product.name}-${product.version}-linux-x86_64.tar">
			<tarfileset dir="${product.linux.64}" prefix="cubridadmin" />
			<tarfileset file="${product.linux.64}/${launcher.name}" filemode="755" prefix="cubridadmin" />
			<tarfileset dir="${product.linux.64}/jre" prefix="cubridadmin/jre" >
				<exclude name="**/bin/**" />
			</tarfileset>
			<tarfileset dir="${product.linux.64}/jre/bin" prefix="cubridadmin/jre/bin" filemode="755" />
		</tar>
		<gzip src="${deploy.home}/${product.name}-${product.version}-linux-x86_64.tar" destfile="${output.path}/${product.name}-${product.version}-linux-x86_64${debug}.tar.gz" />
	</target>

	<!--
	package macosx carbon
	-->
	<!--
	<target name="packagecarbon" depends="postbuild">
		<tar destfile="${deploy.home}/${product.name}-${product.version}-macosx-carbon.tar">
			<tarfileset dir="${product.macosx.carbon}" filemode="755" includes="**/Contents/MacOS/${launcher.name}" />
			<tarfileset dir="${product.macosx.carbon}" excludes="**/Contents/MacOS/${launcher.name}" />
		</tar>
		<gzip src="${deploy.home}/${product.name}-${product.version}-macosx-carbon.tar" destfile="${output.path}/${product.name}-${product.version}-macosx-carbon${debug}.tar.gz" />
	</target>
	-->

	<!--
	package macosx cocoa
	-->
	<target name="packagemac" depends="postbuild">
		<untar src="${build.dir}/cm-macosx-java7-patch.tgz" dest="${build.dir}/patch" compression="gzip" />
		<delete dir="${product.macosx.cocoa}/${product.name}.app" />
		<delete dir="${product.macosx.cocoa}/plugins/org.eclipse.equinox.launcher.cocoa.macosx.x86_64_1.1.0.v20100503" />
		<delete file="${product.macosx.cocoa}/plugins/org.eclipse.equinox.launcher_1.1.0.v20100507.jar" />
		<copy todir="${product.macosx.cocoa}/${product.name}.app">
			<fileset dir="${build.dir}/patch/cubridmanager.app" />
		</copy>
		<copy todir="${product.macosx.cocoa}/plugins">
			<fileset file="${build.dir}/patch/org.eclipse.equinox.launcher_1.1.0.v20100507.jar" />
		</copy>
		<copy todir="${product.macosx.cocoa}/plugins/org.eclipse.equinox.launcher.cocoa.macosx.x86_64_1.1.0.v20100503">
			<fileset dir="${build.dir}/patch/org.eclipse.equinox.launcher.cocoa.macosx.x86_64_1.1.0.v20100503" />
		</copy>
		<move todir="${product.macosx.cocoa}/${product.name}.app/Contents/app" includeEmptyDirs="yes" verbose="true">
			<fileset dir="${product.macosx.cocoa}">
				<include name="**/*"/>
				<exclude name="**/${product.name}.app/**"/>
			</fileset>
		</move>
		<chmod file="${product.macosx.cocoa}/${product.name}.app/Contents/MacOS/${launcher.name}" perm="755" />
		<delete file="${product.macosx.cocoa}/${product.name}.app/Contents/MacOS/launcher" />
		<delete includeemptydirs="true">
			<fileset dir="${product.macosx.cocoa}/${product.name}.app/Contents/app/${launcher.name}.app" includes="**/*" />
		</delete>
		<delete dir="${product.macosx.cocoa}/${product.name}.app/Contents/app/${launcher.name}.app" />
		<tar longfile="gnu" destfile="${deploy.home}/${product.name}-${product.version}-macosx-cocoa.tar">
			<tarfileset dir="${product.macosx.cocoa}" filemode="755" includes="**/Contents/MacOS/${launcher.name}" />
			<tarfileset dir="${product.macosx.cocoa}" excludes="**/Contents/MacOS/${launcher.name}" />
		</tar>
		<gzip src="${deploy.home}/${product.name}-${product.version}-macosx-cocoa.tar" destfile="${output.path}/${product.name}-${product.version}-macosx-cocoa${debug}.tar.gz" />
	</target>

	<!--
	package product site in win
	-->
	<!--
	<target name="package_product_site_win" depends="postbuild">
		<zip destfile="${output.path}/${product.name}-site-${product.version}${debug}.zip">
			<zipfileset prefix="cubridmanager" dir="${repositoryDirectory}" />
		</zip>
	</target>
	-->

	<!--
	package autoupdate
	-->
	<target name="package_autoupdate" depends="postbuild">
		<tar destfile="${deploy.home}/${product.name}-site-${product.version}${debug}.tar">
			<tarfileset dir="${repositoryDirectory}" prefix="cubridadmin" />
		</tar>
		<gzip src="${deploy.home}/${product.name}-site-${product.version}${debug}.tar" destfile="${output.path}/${product.name}-site-${product.version}${debug}.tar.gz" />
	</target>

	<!--
	Make win32 installer for CUBRID Manager
	-->
	<target name="win32installer" description="Make win32 installer" depends="postbuild">
		<echo>execute=${makensis.path}, version=${product.version}, input=${makensis.input.path}/win32/${archivePrefix}, output=${makensis.output.path}</echo>
		<exec dir="${installer.win}" outputproperty="installer.output" errorproperty="redirector.err" executable="wine" failifexecutionfails="false">
	  		<arg value="${makensis.path}" />
	  		<arg value="/DINTERNAL_VERSION=${product.version}" />
	  		<arg value="/DINFILE_PATH=${makensis.input.path}/win32/${archivePrefix}" />
	  		<arg value="/DOUTFILE_PATH=${makensis.output.path}" />
			<arg value="CUBRIDManager_with_jre.nsi" />
		</exec>
	</target>

	<!--
	Make win64 installer for CUBRID Manager
	-->
	<target name="win64installer" description="Make win64 installer" depends="postbuild">
		<echo>execute=${makensis.path}, version=${product.version}, input=${makensis.input.path}/win32/${archivePrefix}, output=${makensis.output.path}</echo>
		<exec dir="${installer.win}"  outputproperty="installer.output" errorproperty="redirector.err" executable="wine" failifexecutionfails="false">
	  		<arg value="${makensis.path}" />
	  		<arg value="/DINTERNAL_VERSION=${product.version}" />
	  		<arg value="/DINFILE_PATH=${makensis.input.path}/win64/${archivePrefix}" />
	  		<arg value="/DOUTFILE_PATH=${makensis.output.path}" />
			<arg value="CUBRIDManager_x64_with_jre.nsi" />
		</exec>
	</target>

	<!--
	Make linux32 installer for CUBRID Manager
	-->
	<!--
	<target name="linux32installer" description="Make linux32 installer" depends="postbuild">
		<exec dir="${installer.linux}" outputproperty="installer.output" errorproperty="redirector.err" executable="${installer.linux}/build.sh" failifexecutionfails="false">
	  		<arg value="-v${product.version}" />
	  		<arg value="-i${product.linux.32}" />
	  		<arg value="-o${output.path}" />
	  		<arg value="-plinux-i386" />
		</exec>
	</target>
	-->
	<!--
	Make linux64 installer for CUBRID Manager
	-->
	<!--
	<target name="linux64installer" description="Make linux64 installer" depends="postbuild">
		<exec dir="${installer.linux}" outputproperty="installer.output" errorproperty="redirector.err" executable="${installer.linux}/build.sh" failifexecutionfails="false">
	  		<arg value="-v${product.version}" />
	  		<arg value="-i${product.linux.64}" />
	  		<arg value="-o${output.path}" />
	  		<arg value="-plinux-x86_64" />
		</exec>
	</target>
	-->

	<!--
	Make mac osx installer for CUBRID Manager
	-->
	<target name="macinstaller" description="Make mac dmg installer" depends="postbuild">
		<exec dir="${installer.mac}" outputproperty="installer.output" errorproperty="redirector.err" executable="${installer.mac}/package.sh" failifexecutionfails="false">
			<arg value="--name=${product.name}" />
			<arg value="--version=${product.version}" />
			<arg value="--dsstore=${installer.mac}/cubridmanager-dmg-dsstore.tgz" />
			<arg value="--input=${product.macosx.cocoa}" />
			<arg value="--output=${output.path}" />
		</exec>
	</target>

	<target depends="packagewin32,packagewin64,win32installer,win64installer" name="distwin" />
	<target depends="packagelinux32,packagelinux64" name="distlinux" />
	<target depends="packagemac,macinstaller" name="distmac" />
	<target depends="clean,distwin,distlinux,distmac,package_autoupdate" name="dist" />
</project>
